{"service_name":"travis-ci","service_job_id":"9735328","git":{"branch":"(detached from 5f92130)","head":{"id":"5f921301cc298bad4c3b03cfdc12e3b451970a6e","author_name":"Erin Millard","author_email":"ezzatron@gmail.com","committer_name":"Erin Millard","committer_email":"ezzatron@gmail.com","message":"General repo refresh."},"remotes":[{"name":"origin","url":"git:\/\/github.com\/eloquent\/blox.git"}]},"run_at":"2013-08-01 13:28:27 +0000","source_files":[{"name":"Eloquent\/Blox\/BloxParser.php","source":"<?php\n\n\/*\n * This file is part of the Blox package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Blox;\n\n\/**\n * A documentation parser for standard Blox-type documentation block comments.\n *\/\nclass BloxParser implements DocumentationBlockParserInterface\n{\n    \/**\n     * Parse a documentation block comment.\n     *\n     * @param string $blockComment The documentation block comment.\n     *\n     * @return DocumentationBlock The parsed documentation block object.\n     *\/\n    public function parseBlockComment($blockComment)\n    {\n        $blockCommentLines = $this->parseBlockCommentLines($blockComment);\n\n        return new Element\\DocumentationBlock(\n            $this->parseBlockCommentTags($blockCommentLines),\n            $this->parseBlockCommentSummary($blockCommentLines),\n            $this->parseBlockCommentBody($blockCommentLines)\n        );\n    }\n\n    \/**\n     * @param string $blockComment\n     *\n     * @return array\n     *\/\n    protected function parseBlockCommentLines($blockComment)\n    {\n        $lines = array();\n        if (preg_match_all('~^\\s*\\* ?(?!\/)(.*)$~m', $blockComment, $matches)) {\n            $lines = $matches[1];\n        }\n\n        return $lines;\n    }\n\n    \/**\n     * @param array &$blockCommentLines\n     *\n     * @return DocumentationTags\n     *\/\n    protected function parseBlockCommentTags(array &$blockCommentLines)\n    {\n        $tags = array();\n        $currentTagName = $currentTagContent = null;\n        foreach ($blockCommentLines as $index => $blockCommentLine) {\n            $isTagLine = preg_match(\n                '~^@(\\w+)(?:\\s+(.*))?\\s*$~',\n                $blockCommentLine,\n                $matches\n            );\n            $isEmptyLine = '' === trim($blockCommentLine);\n\n            if (\n                ($isTagLine || $isEmptyLine) &&\n                null !== $currentTagName\n            ) {\n                if ('' === $currentTagContent) {\n                    $currentTagContent = null;\n                }\n                $tags[] = new Element\\DocumentationTag(\n                    $currentTagName,\n                    $currentTagContent\n                );\n\n                $currentTagName = $currentTagContent = null;\n            }\n\n            if ($isTagLine) {\n                $currentTagName = $matches[1];\n                $currentTagContent = '';\n                if (array_key_exists(2, $matches)) {\n                    $currentTagContent = $matches[2];\n                }\n            } elseif (!$isEmptyLine) {\n                $currentTagContent .= ' ' . ltrim($blockCommentLine);\n            }\n\n            if (null !== $currentTagName || count($tags) > 0) {\n                unset($blockCommentLines[$index]);\n            }\n        }\n        if (null !== $currentTagName) {\n            if ('' === $currentTagContent) {\n                $currentTagContent = null;\n            }\n            $tags[] = new Element\\DocumentationTag(\n                $currentTagName,\n                $currentTagContent\n            );\n        }\n\n        return $tags;\n    }\n\n    \/**\n     * @param array &$blockCommentLines\n     *\n     * @return string|null\n     *\/\n    protected function parseBlockCommentSummary(array &$blockCommentLines)\n    {\n        $summary = '';\n        foreach ($blockCommentLines as $index => $blockCommentLine) {\n            if ('' === trim($blockCommentLine)) {\n                break;\n            }\n\n            if ('' !== $summary) {\n                $summary .= ' ';\n            }\n            $summary .= ltrim($blockCommentLine);\n\n            unset($blockCommentLines[$index]);\n        }\n\n        if ('' === $summary) {\n            $summary = null;\n        } else {\n            $summary = trim($summary);\n        }\n\n        return $summary;\n    }\n\n    \/**\n     * @param array $blockCommentLines\n     *\n     * @return string|null\n     *\/\n    protected function parseBlockCommentBody(array $blockCommentLines)\n    {\n        $body = '';\n        foreach ($blockCommentLines as $index => $blockCommentLine) {\n            $body .= $blockCommentLine . \"\\n\";\n        }\n\n        if ('' === $body) {\n            $body = null;\n        } else {\n            $body = trim($body);\n        }\n\n        return $body;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,7,null,7,7,7,7,7,null,null,null,null,null,null,null,null,null,7,7,7,7,null,7,null,null,null,null,null,null,null,null,null,7,7,7,7,7,7,null,7,7,null,null,7,7,7,4,1,1,4,4,null,4,null,4,4,null,7,4,4,4,3,3,7,5,5,null,7,4,4,7,7,1,1,1,1,1,null,1,1,null,7,null,null,null,null,null,null,null,null,null,7,7,5,5,null,null,3,3,3,3,null,3,7,null,7,4,4,3,null,null,7,null,null,null,null,null,null,null,null,null,7,7,5,7,null,7,2,2,5,null,null,7,null,null]},{"name":"Eloquent\/Blox\/DocumentationBlockParserInterface.php","source":"<?php\n\n\/*\n * This file is part of the Blox package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Blox;\n\n\/**\n * The interface implemented by documentation parsers.\n *\/\ninterface DocumentationBlockParserInterface\n{\n    \/**\n     * Parse a documentation block comment.\n     *\n     * @param string $blockComment The documentation block comment.\n     *\n     * @return DocumentationBlock The parsed documentation block object.\n     *\/\n    public function parseBlockComment($blockComment);\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Blox\/Element\/DocumentationBlock.php","source":"<?php\n\n\/*\n * This file is part of the Blox package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Blox\\Element;\n\n\/**\n * Represents an entire documentation block.\n *\/\nclass DocumentationBlock\n{\n    \/**\n     * Construct a new documentation block.\n     *\n     * @param array<DocumentationTag>|null $tags    The tags contained in the\n     *     block.\n     * @param string|null                  $summary The summary text.\n     * @param string|null                  $body    The body text.\n     *\/\n    public function __construct(\n        array $tags = null,\n        $summary = null,\n        $body = null\n    ) {\n        if (null === $tags) {\n            $tags = array();\n        }\n\n        $this->tags = $tags;\n        $this->summary = $summary;\n        $this->body = $body;\n    }\n\n    \/**\n     * Get all the tags of this block.\n     *\n     * @return array<DocumentationTag> The tags.\n     *\/\n    public function tags()\n    {\n        return $this->tags;\n    }\n\n    \/**\n     * Get all the tags of this block with a specific tag name.\n     *\n     * @param string $name The tag name to search for.\n     *\n     * @return array<DocumentationTag> The tags with a matching tag name.\n     *\/\n    public function tagsByName($name)\n    {\n        $tags = array();\n        foreach ($this->tags() as $tag) {\n            if ($name === $tag->name()) {\n                $tags[] = $tag;\n            }\n        }\n\n        return $tags;\n    }\n\n    \/**\n     * Get the summary text.\n     *\n     * @return string|null The summary text.\n     *\/\n    public function summary()\n    {\n        return $this->summary;\n    }\n\n    \/**\n     * Get the body text.\n     *\n     * @return string|null The body text.\n     *\/\n    public function body()\n    {\n        return $this->body;\n    }\n\n    \/**\n     * Visit this block.\n     *\n     * @param DocumentationVisitorInterface $visitor The visitor to accept.\n     *\n     * @return mixed The visitor's result.\n     *\/\n    public function accept(DocumentationVisitorInterface $visitor)\n    {\n        return $visitor->visitDocumentationBlock($this);\n    }\n\n    private $tags;\n    private $summary;\n    private $body;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,4,2,2,null,4,4,4,4,null,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,null,null,null,null,2,2,2,2,2,2,null,2,null,null,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null]},{"name":"Eloquent\/Blox\/Element\/DocumentationTag.php","source":"<?php\n\n\/*\n * This file is part of the Blox package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Blox\\Element;\n\n\/**\n * Represents a single documentation tag.\n *\/\nclass DocumentationTag\n{\n    \/**\n     * Construct a new documentation tag.\n     *\n     * @param string      $name    The tag name.\n     * @param string|null $content The tag content.\n     *\/\n    public function __construct($name, $content = null)\n    {\n        $this->name = $name;\n        $this->content = $content;\n    }\n\n    \/**\n     * Get the tag name.\n     *\n     * @return string The tag name.\n     *\/\n    public function name()\n    {\n        return $this->name;\n    }\n\n    \/**\n     * Get the tag content.\n     *\n     * @return string|null The tag content.\n     *\/\n    public function content()\n    {\n        return $this->content;\n    }\n\n    \/**\n     * Visit this tag.\n     *\n     * @param DocumentationVisitorInterface $visitor The visitor to accept.\n     *\n     * @return mixed The visitor's result.\n     *\/\n    public function accept(DocumentationVisitorInterface $visitor)\n    {\n        return $visitor->visitDocumentationTag($this);\n    }\n\n    private $name;\n    private $content;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,4,4,4,null,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null]},{"name":"Eloquent\/Blox\/Element\/DocumentationVisitorInterface.php","source":"<?php\n\n\/*\n * This file is part of the Blox package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Blox\\Element;\n\n\/**\n * The interface implemented by documentation visitors.\n *\/\ninterface DocumentationVisitorInterface\n{\n    \/**\n     * Visit a documentation block.\n     *\n     * @param DocumentationBlock $documentationBlock The block.\n     *\n     * @return mixed The visitor's result.\n     *\/\n    public function visitDocumentationBlock(\n        DocumentationBlock $documentationBlock\n    );\n\n    \/**\n     * Visit a documentation tag.\n     *\n     * @param DocumentationTag $documentationTag\n     *\n     * @return mixed The visitor's result.\n     *\/\n    public function visitDocumentationTag(DocumentationTag $documentationTag);\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]}]}